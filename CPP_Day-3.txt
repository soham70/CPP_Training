Q-What is Inheritance?
=> inheritance is a process in which one object acquires all the properties a
nd behaviors of its parent object automatically.
CPP Supports 5 types of Inheritance:
Single inheritance
Multiple inheritance
Hierarchical inheritance
Multilevel inheritance
Hybrid inheritance

-------------------------------------------------------------------------------------------------
#include<iostream>
using namespace std;

void func()
{
    static int i=0;
    int j=0;
    
    i++;
    j++;
    cout<<"i="<<i<<" "<<"j="<<j<<endl;
}


int main()
{
    func();
    func();
    func();
}

-----------------------------------------------------------------------------------------------------
@ Bank System:
#include <iostream>
using namespace std;

class Bank{
    
    public :
    float balanace=1000.0;
    
    int deposit(int money)
    {
        balanace +=money;
        return balanace;
    }
    
    int withdraw(int money)
    {
        balanace-=money;
        return balanace;
    }
    
};

int main()
{
    Bank b;
    int choice;
    float amount;
    
    cout<<"Enter which OPeration to be performed:"<<endl;
    cout<<"1) Deposit Money"<<endl;
    cout<<"2)Withdraw Money"<<endl;
    cin>>choice;
    
    switch (choice){
        case 1:
            cout<<"Enter Amount to be Deposited: ";
            cin>>amount;
            // b.deposit(amount);
            cout<<"Your Current Balance is "<<b.deposit(amount)<<"rs.";
            break;
        case 2:
            cout<<"Enter Amount to be Withdrawn: ";
            cin>>amount;
            // b.deposit(amount);
            cout<<"Your Current Balance is "<<b.withdraw(amount)<<"rs.";
            break;
            
        default:
            cout<<"Enter Correct Choice";
            break;
}
}
--------------------------------------------------------------------------------------------------------
Function:
1)Call by Value:
#include <iostream>
using namespace std;

void change(int data);

int main()
{
    int d = 10;
    change(d);
    cout<<" Value of  data is "<<d<<endl;
    return 0;
}

void change(int data)
{
    data = 25;
}

2)Call by reference:
#include <iostream>
using namespace std;

void change(int &data);

int main()
{
    int d = 10;
    change(d);
    cout<<" Value of  data is "<<d<<endl;
    return 0;
}

void change(int &data)
{
    data = 25;
}

------------------------------------------------------------------------------------------------------
Factorial Recursive
#include <iostream>
using namespace std;

int fact(int n)
{
    if(n==0 || n ==1)return 1;

    return n * fact(n-1);
    
}


int main()
{
    int n;
    cout<<"Enter a Number: ";
    cin>>n;
    
    cout<<"Factorial of "<<n<<" is "<<fact(n);

}
--------------------------------------------------------------------------------------------------
Q-Fibonacci Recursive:

#include <iostream>
using namespace std;

int fibo(int n)
{
    if (n==1) return 0;
    if(n==2 || n==3)return 1;
    
    return fibo(n-1) + fibo(n-2);
    
}


int main()
{
    int n;
    cout<<"Enter a Number: ";
    cin>>n;
    
    for (int i=n;i>=0;i--)
    {cout<<fibo(i)<<endl;}

}
------------------------------------------------------------------------------------------------------
Polymorphism:
The term "Polymorphism" is the combination of "poly" + "morphs" which means many forms.
>Compile Time :
1)Function Overloading:
#include <iostream>
using namespace std;


int add(int a ,int b)
{
    return a+b;
}

int add(int a,int b,int c)
{
    return a+b+c;
}

float add(float a,float b)
{
    return a+b;
}

int main()
{
    cout<<add(10,20)<<endl;
    cout<<add(10,20,30)<<endl;
    cout<<add(10.234f,35.765f)<<endl;
    
}
------------------------------------------------------------------------------------------------------------
2)Operator Overloading:

#include <iostream>
using namespace std;

class Add{
    public:
        int x;
    
    public:
        Add(){};
        Add(int i){
            x=i;
        }
        void operator+(Add);
        void display();
    
};

void Add::operator+(Add a){
    int m = x + a.x;
    cout<<"Addition:"<<m;
    
    
}

int main()
{
    Add a(5);
    Add b(10);
    a+b;      
}

>Run time :
Function Overriding:

#include <iostream>
using namespace std;

class Animal{
    public:
        void display()
        {
            cout<<"Animal is eating"<<endl;
        }
};

class Dog : public Animal{
  
  public:
    void display()
    {
        cout<<"Dog is Eating"<<endl;
    }
};



int main()
{
    Dog g;
    g.display();
       
}
--------------------------------------------------------------------------------------------------------------
Q-Virtual Function:
#include <iostream>
using namespace std;

class Animal{
    public:
     virtual void display()
        {
            cout<<"Animal is eating"<<endl;
        }
};

class Dog : public Animal{
  
  public:
    void display()
    {
        cout<<"Dog is Eating"<<endl;
    }
};



int main()
{
    Dog d;
    
    Animal *a  = &d;
    
    a->display();
      
}
------------------------------------------------------------------------------------------------------------
Q- What is CI CD?
=> Continous Integration: With Continuous Integration, developers frequently commit to a shared common
 repository using a version control system such as Git.
 A continuous integration pipeline can automatically run builds, store the artifacts, run unit tests, and even conduct code reviews using tools like Sonar.

Continous Delivery:
Continuous delivery helps developers testtheir code in a 
production-similar environment, hence preventing any last-moment or post-production surprises. 